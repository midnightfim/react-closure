{"version":3,"sources":["components/Proto.js","components/ClosureCounter.js","components/Parent.js","serviceWorker.js","index.js"],"names":["Person","name","age","this","prototype","greeting","console","log","firstPerson","secondPerson","constructor","ClosureCounter","state","num","counter","count","setState","closureCounter","style","margin","onClick","React","Component","Parent","data","updateState","who","update","Child","message","props","GrandChild","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLAAA,IAAIA,GAGJA,EAAS,SAASC,EAAMC,GACpBC,KAAKF,KAAOA,EACZE,KAAKD,IAAMA,IAIRE,UAAUC,SAAW,WACxBC,QAAQC,IAAI,2DAAgBJ,KAAKF,KAAO,iLAI5C,IAAIO,EAAc,IAAIR,EAAO,OAAQ,IACjCS,EAAe,IAAIT,EAAO,OAAQ,IAEtCQ,EAAYH,WACZC,QAAQC,IAAIE,EAAaC,cAAgBV,I,mHC2B1BW,G,iNAvCXC,MAAQ,CACJC,IAAK,G,mFAGY,IAAD,OAEhBV,KAAKW,QAAU,WAEX,IAAIC,EAAQ,EACZ,OAAO,WACHA,IAEA,EAAKC,SAAS,CACVH,IAAKE,MAQjBZ,KAAKc,eAAiBd,KAAKW,Y,+BAGrB,IAAD,OACL,OACI,yBAAKI,MAAO,CAACC,OAAQ,UAArB,mHAK2BhB,KAAKS,MAAMC,IAClC,6BACA,4BAAQO,QAAS,WAAK,EAAKH,mBAA3B,c,GApCaI,IAAMC,YCE7BC,G,iNAGJX,MAAQ,CACNY,KAAM,oH,EAIRC,YAAc,SAACC,GACb,EAAKV,SAAS,CACZQ,KAAK,6GAAD,OAA0BE,M,wEAKhC,OACE,yBAAKR,MAAO,CAACC,OAAQ,UAArB,qDACahB,KAAKS,MAAMY,KACtB,kBAAC,EAAD,CAAOG,OAAQxB,KAAKsB,cAEpB,kBAAC,EAAD,W,GApBaJ,IAAMC,YA0BrBM,E,2MAGJC,QAAU,2B,wEAEA,IAAD,OACP,OACE,wIAGE,4BAAQT,QAAS,kBAAM,EAAKU,MAAMH,OAAO,EAAKE,WAA9C,SAIA,kBAAC,EAAD,CAAYF,OAAQxB,KAAK2B,MAAMH,c,GAdnBN,IAAMC,WAqBpBS,E,2MAGJF,QAAU,2B,wEAEA,IAAD,OACP,OACE,4PAGE,4BAAQT,QAAS,kBAAM,EAAKU,MAAMH,OAAO,EAAKE,WAA9C,c,GAViBR,IAAMC,WAmBhBC,IC3DKS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fcc1d8f9.chunk.js","sourcesContent":["let Person \r\n// функция-конструктор наших объектов\r\n\r\nPerson = function(name, age) {\r\n    this.name = name;\r\n    this.age = age;\r\n};\r\n\r\n// Добавляем в прототип нашего конструктора метод\r\nPerson.prototype.greeting = function() {\r\n    console.log(\"Меня зовут \" + this.name + \", и я пишу из родительского класса!!!\");\r\n}\r\n\r\n// создаем объекты из нашего \"класса\"\r\nlet firstPerson = new Person(\"John\", 23);\r\nlet secondPerson = new Person(\"Mary\", 66);\r\n\r\nfirstPerson.greeting(); // \"Меня зовут John, и я пишу из прототипа!!!\"\r\nconsole.log(secondPerson.constructor === Person); // true\r\n","import React from 'react';\r\n\r\n\r\nclass ClosureCounter extends React.Component {\r\n\r\n    // заводим state для динамического отображения на экране\r\n    state = {\r\n        num: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        // счетчик \r\n        this.counter = () => {\r\n            // объявляем переменную для счетчика\r\n            let count = 0;\r\n            return () => {\r\n                count++;\r\n                // в state записываем текущее значение count\r\n                this.setState({\r\n                    num: count\r\n                  })\r\n                }\r\n        }\r\n        /* \r\n        после того, как мы присвоим closureCounter значение вызванной функции counter, \r\n        она сохранит переменную count и будет иметь доступ к ней\r\n        */\r\n        this.closureCounter = this.counter();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{margin: \"200px\"}}>\r\n                {/* \r\n                    счетчик будет увеличиваться, \r\n                    потому что переменная count ЗАМЫКАЕТСЯ\r\n                */}\r\n                Счетчик из замыкания: {this.state.num}\r\n                <br/>\r\n                <button onClick={()=>{this.closureCounter()}}> INC </button>\r\n            </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ClosureCounter;\r\n","import React from 'react';\nimport '../App.css';\nimport ClosureCounter from './ClosureCounter';\nimport Proto from './Proto';\n\nclass Parent extends React.Component {\n\n  // будем сохранять данные из дочерних компонентов в state родителя\n  state = {\n    data: 'НАЧАЛЬНОЕ СОСТОЯНИЕ...'\n  }\n\n  // функция, которая будет получать данные\n  updateState = (who) => {\n    this.setState({\n      data: `Данные обновлены из: ${who}`\n    })\n  }\n\n  render() {\n    return (\n      <div style={{margin: \"100px\"}}>\n        РОДИТЕЛЬ: {this.state.data}\n        <Child update={this.updateState}/>\n        {/* передаем в дочерний компонент функцию, которая будет получать данные */}\n        <ClosureCounter />\n      </div>\n    )\n  }\n}\n\nclass Child extends React.Component {\n\n  // предпологаемые \"данные\"\n  message = \"ДОЧЬ\";\n\n  render() {\n    return (\n      <div>\n        Дочерний компонент: \n        {/* при вызове this.props.update(this.message) данные придут в родительский state */}\n        <button onClick={() => this.props.update(this.message)}>\n          CLICK\n        </button>\n        {/* передаем в дочерний компонент функцию, которая будет получать данные */}\n        <GrandChild update={this.props.update}/>\n      </div>\n    );\n  }\n}\n\n\nclass GrandChild extends React.Component {\n\n  // предпологаемые \"данные\"\n  message = \"ВНУК\";\n\n  render() {\n    return (\n      <div>\n        Дочерний компонент дочернего компонента: \n        {/* при вызове this.props.update(this.message) данные придут в родительский state */}\n        <button onClick={() => this.props.update(this.message)}>\n           CLICK\n        </button>\n      </div>\n    );\n  }\n}\n\n\nexport default Parent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Parent from './components/Parent';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Parent />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}